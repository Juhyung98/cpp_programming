[고급프로그래밍및실습(나) P#2 - 20180402 최주형]

** 코드 구현은 주석처리로 설명 **

1. 문제 정의: 내가 만들어야할 기능을 정의 (예: 클래스 정의, 생성자, 연산자 오버로딩 등등)

1) 클래스 정의 : 실수부와 허수부를 가진 복소수를 표현하는 class
- 실수부와 허수부를 각각의 변수에 저장하는 class

2) 생성자 
- 두개의 인자 (실수부, 허수부)를 가지는 생성자
- 0개의 인자를 가지는 디폴트 생성자 (0+0i로 초기화)
- 한개의 인자 (실수부) --> 실수

3) 연산자 오버로딩 -> 사칙 연산 구현 (복소수와 허수간의 모든 경우를 지원)
## OP : +-*/
- 복소수 op 복소수 (a+bi OP a+bi)
- 복소수 op 실수 (a+bi OP a)
- 실수 op 복소수 (a OP a+bi) 
# cout 출력 지원 : 복소수 class 타입의 cout 지원
                : 복소수의 타입(a +bi or bi or a ....)에 맞게 출력하는 << 연산자 오버로딩
# Divide by 0 오류 처리 : (a+bi / 0) 연산 수행 시, 오류 메시지 출력 후 실행 종료


2: 프로그램 설계: 위에서 정의한 문제를 해결하기 위한 구체적인 방법 제시

1) NComplex 클래스
class NComplex
{
public:
    NComplex(); 
    NComplex(double real_number);
    NComplex(double real_number, double imaginary_number);

    friend const NComplex operator +(const NComplex n1, const NComplex n2);
    friend const NComplex operator -(const NComplex n1, const NComplex n2);
    friend const NComplex operator *(const NComplex n1, const NComplex n2);
    friend const NComplex operator /(const NComplex n1, const NComplex n2);
    friend ostream& operator <<(ostream& outputStream, const NComplex complex_number);

private:
    double real_num;
    double imaginary_num;
};

- 3가지 생성자
- double 타입의 실수부와 허수부 (실수부와 허수부를 표현하는 멤버 변수는 private을 유지)

2) 생성자 
# 2개의 인자 : 실수부와 허수부 모두 초기화
-> a+bi        NComplex(double real_number, double imaginary_number);
-> bi (허수부만 존재, 0 + bi)

# 1개의 인자 : 실수부만 초기화, 허수부 = 0
-> a (실수)    NComplex(double real_number);

# 0개의 인자 : 디폴트 생성자 / 실수부 허수부 = 0
-> 0 + 0i      NComplex(); 


3) 연산자 오버로딩
- 각 사칙연산에 대한 연산자 오버로드 (+-*/ 오버로드)
- cout 출력 지원 (<< 오버로드 )

# 덧셈 오버로드
    실수부 + 실수부, 허수부 + 허수부

# 뺄샘 오버로드
    실수부 - 실수부, 허수부 - 허수부

# 곱셈 오버로드 
    (a+b)(c+d) = ac + ad + bc + bd 의 분배법칙을 이용
       -> (a+bi)(c+di) = ac - bd + (ad + bc)i
    실수부 = ac + bd x (-1) -> 허수 i^2은 -1이므로
    허수부 = ad + bc

# 나눗셈 오버로드
- 4가지 경우
    1.나누는 값(분모) 가 a+bi 의 꼴인 경우
        분모와 분자에 a-bi(분모의 켤레복소수) 를 곱함
        이후 분배법칙을 이용하여 실수부와 허수부를 나누어 계산
        (분모는 반드시 a^2+b^2 꼴이 됨)
    2.나누는 값(분모) 가 bi 의 꼴인 경우
        분모와 분자에 i 를 곱함 (i^2은 -1)
    3.나누는 값(분모) 가 a 의 꼴인 경우
        분자의 실수부와 허수부를 각각 a로 나눔
    4.분모가 0인 경우
        오류 출력 후 프로그램 종료

# <<연산자 오버로드
- 실수부와 허수부의 존재유무 판단 (4가지 경우) 
    1.실수부 존재, 허수부 존재
        - 허수부의 부호에 따라 경우를 나눔 (a + bi / a - bi의 꼴로 출력하기 위함)
        - 허수부에 abs 하여 임시 변수에 저장 후 출력
        허수부의 부호가 + 인 경우 : + 출력
        허수부의 부호가 - 인 경우 : - 출력 
    2.실수부 0, 허수부 존재
        허수부만 출력
    3.실수부 존재, 허수부 0
        실수부만 줄력
    4.실수부 0, 허수부 0
        0 출력
